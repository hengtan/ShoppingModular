version: '3.9'
services:

  postgres:
    image: postgres:16
    container_name: shopping_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: shoppingdb
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    container_name: shopping_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  mongo:
    image: mongo:7
    container_name: shopping_mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--quiet", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 10

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: shopping_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: shopping_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: shopping_zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://shopping_kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data

  prometheus:
    image: prom/prometheus
    container_name: shopping_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana
    container_name: shopping_grafana
    ports:
      - "3000:3000"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    container_name: shopping_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.3
    container_name: shopping_kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"

  orders_api:
    build:
      context: ../..
      dockerfile: services/Orders/Orders.Api/Dockerfile
    container_name: shopping_orders_api
    ports:
      - "5001:5001"
    depends_on:
      - postgres
      - redis
      - mongo
      - kafka
    environment:
      - ASPNETCORE_ENVIRONMENT=Development

  orders_consumer:
    build:
      context: ../..
      dockerfile: services/Orders/Orders.Consumer/Dockerfile
    container_name: shopping_orders_consumer
    depends_on:
      - kafka
      - redis
      - mongo
    environment:
      - ASPNETCORE_ENVIRONMENT=Development

volumes:
  pg_data:
  redis_data:
  mongo_data:
  kafka_data:
  elastic_data: