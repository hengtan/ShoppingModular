name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      ASPNETCORE_ENVIRONMENT: CI

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🧰 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: 🐳 Start Docker containers
        run: docker compose -f docker/infra/docker-compose.yml up -d

      - name: 🩺 Wait for PostgreSQL to be ready
        run: |
          echo "⏳ Waiting for PostgreSQL..."
          for i in {1..20}; do
            if pg_isready -h postgres -U postgres; then
              echo "✅ PostgreSQL is ready!"
              break
            else
              echo "⌛ Attempt $i/20 failed. Retrying in 5s..."
              sleep 5
            fi
            if [ "$i" -eq 20 ]; then
              echo "❌ PostgreSQL did not respond. Showing logs:"
              docker ps -a
              docker logs shopping_postgres || true
              exit 1
            fi
          done

      - name: 🩺 Wait for MongoDB to be ready
        run: |
          echo "⏳ Waiting for MongoDB..."
          for i in {1..20}; do
            if echo 'db.runCommand({ ping: 1 })' | mongo --host mongo:27017 --quiet; then
              echo "✅ MongoDB is ready!"
              break
            else
              echo "⌛ Attempt $i/20 failed. Retrying in 5s..."
              sleep 5
            fi
            if [ "$i" -eq 20 ]; then
              echo "❌ MongoDB did not respond. Showing logs:"
              docker ps -a
              docker logs shopping_mongo || true
              exit 1
            fi
          done

      - name: 📦 Restore dependencies
        run: dotnet restore

      - name: 🔨 Build
        run: dotnet build --no-restore --configuration Release

      - name: 🛠 Install EF Tools
        run: dotnet tool install --global dotnet-ef

      - name: 🔧 Add EF Tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: 🧱 Run EF Core Migrations
        run: dotnet ef database update --project services/Orders/Orders.Api

      - name: 🧪 Run tests with code coverage
        run: dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage"

      - name: 🔄 Update vulnerable packages
        run: |
          chmod +x ./update-packages.sh
          ./update-packages.sh

      - name: 📊 Check for changes
        id: git-check
        run: |
          if git diff --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: ✅ Commit updated packages
        if: steps.git-check.outputs.changed == 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "🔒 chore: update vulnerable NuGet packages"
          git push