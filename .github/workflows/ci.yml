name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      ASPNETCORE_ENVIRONMENT: CI

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🧰 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: 🐳 Start Docker containers
        run: docker compose -f docker/infra/docker-compose.yml up -d

      - name: 🩺 Wait for PostgreSQL to be ready
        run: |
          echo "⏳ Waiting for PostgreSQL..."
          for i in {1..20}; do
            if docker exec shopping_postgres pg_isready -U postgres; then
              echo "✅ PostgreSQL is ready!"
              break
            else
              echo "⌛ Attempt $i/20 failed. Retrying in 5s..."
              sleep 5
            fi
            if [ "$i" -eq 20 ]; then
              echo "❌ PostgreSQL did not respond. Showing logs:"
              docker logs shopping_postgres || true
              docker ps -a
              exit 1
            fi
          done

      - name: 📦 Restore dependencies
        run: dotnet restore

      - name: 🧹 Clean solution
        run: dotnet clean

      - name: 🔨 Build
        run: dotnet build --no-restore --configuration Release

      - name: 🛠 Install EF Tools (safe)
        run: |
          if ! dotnet tool list -g | grep -q dotnet-ef; then
            dotnet tool install --global dotnet-ef
          fi

      - name: 🔧 Add EF Tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: 🧱 Run EF Core Migrations (Orders)
        run: dotnet ef database update --no-restore --project building-blocks/ShoppingModular.Infrastructure --startup-project services/Orders/Orders.Api
        env:
          DOTNET_ROOT: /usr/share/dotnet
          PATH: $PATH:/home/runner/.dotnet/tools
          ASPNETCORE_ENVIRONMENT: CI

      - name: 🧱 Run EF Core Migrations (Products)
        run: dotnet ef database update --no-restore --project building-blocks/ShoppingModular.Infrastructure --startup-project services/Products/Products.Api --context ProductDbContext
        env:
          DOTNET_ROOT: /usr/share/dotnet
          PATH: $PATH:/home/runner/.dotnet/tools
          ASPNETCORE_ENVIRONMENT: CI

      - name: 🧪 Run tests
        run: dotnet test --no-build --configuration Release --logger:"console;verbosity=detailed" --collect:"XPlat Code Coverage"

      - name: 💾 Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: '**/TestResults/**/*.xml'

      - name: 🔄 Update vulnerable packages
        run: |
          chmod +x ./update-packages.sh
          ./update-packages.sh

      - name: 📊 Check for changes
        id: git-check
        run: |
          if git diff --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: ✅ Commit updated packages
        if: steps.git-check.outputs.changed == 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "🔒 chore: update vulnerable NuGet packages"
          git push